<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dunyaoguz.github.io - projects</title><link href="https://dunyaoguz.github.io/my-blog/" rel="alternate"></link><link href="https://dunyaoguz.github.io/my-blog/feeds/projects.atom.xml" rel="self"></link><id>https://dunyaoguz.github.io/my-blog/</id><updated>2019-05-29T00:00:00-04:00</updated><entry><title>LyrIQ</title><link href="https://dunyaoguz.github.io/my-blog/capstone.html" rel="alternate"></link><published>2019-05-29T00:00:00-04:00</published><updated>2019-05-29T00:00:00-04:00</updated><author><name>Dunya Oguz</name></author><id>tag:dunyaoguz.github.io,2019-05-29:/my-blog/capstone.html</id><summary type="html">&lt;p&gt;I am graduating from the data science bootcamp at Bitmaker General Assembly in Toronto in a few days, and have spent the past 2 weeks working on the project that the entire program culminates to: &lt;strong&gt;the capstone&lt;/strong&gt;. This blog post is going to be an overview of my capstone project â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am graduating from the data science bootcamp at Bitmaker General Assembly in Toronto in a few days, and have spent the past 2 weeks working on the project that the entire program culminates to: &lt;strong&gt;the capstone&lt;/strong&gt;. This blog post is going to be an overview of my capstone project and the main steps involved in building the final product. &lt;/p&gt;
&lt;p&gt;The source code for the project is available on my &lt;a href="https://github.com/dunyaoguz"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;My capstone is a web application that allows users to analyze the topics, polarity and sentiments of song lyrics. The application has 3 main functionalities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drill down on the lyrics of a specific artist&lt;/li&gt;
&lt;li&gt;Compare two artists' lyrics &lt;/li&gt;
&lt;li&gt;Analyse the lyrics of all Billboard year-end hot 100 artists since 2006&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="images/capstone_2_0.png" alt="dt" width="950"/&gt;&lt;/p&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;This was an end-to-end data project, involving every step of the data science process from data acquisition to deployment in the form of an application a user can interact with. Here is an overview of the main steps: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get data by scraping lyrics and song-related information from Genius.com &lt;/li&gt;
&lt;li&gt;Extract sentiments, polarity and topics from lyrics &lt;/li&gt;
&lt;li&gt;Cluster artists whose lyrics are similar in sentiments, and songs similar in sentiments for each individual artist&lt;/li&gt;
&lt;li&gt;Create visualisations that'll enable users to explore the information interactively&lt;/li&gt;
&lt;li&gt;Package everything into a web application with which users can analyse any artist of their choice &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Web Scraping&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;The web scraping component of the project had a lot of moving pieces. At this stage, my idea was still very much in the works, but one thing I knew for sure was that I wanted the application to be able to take any artist and deliver results. As such, for the web scraping part, it was important that I designed a process that would be automated and could scale.&lt;/p&gt;
&lt;p&gt;I was pretty lucky because &lt;a href="https://genius.com"&gt;Genius.com&lt;/a&gt; has an open API and a wide inventory of lyrics. Unfortunately, the lyrics data isn't available on the API itself, so I had to come up with somewhat a creative way to go from having the name of the artist I want to scrape to having the lyrics for all of his or her songs that exist on Genius.com.&lt;/p&gt;
&lt;p&gt;This diagram summarizes my process:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/capstone_5_0.png" alt="dt" width="800"/&gt;&lt;/p&gt;
&lt;p&gt;After creating this pipeline and scraping ~20 artists, I realised that constantly having to enter the name of an artist to scrape was getting tiresome. I was also running out of artists that I could think of off the top of my head and was constantly having to google for popular artists. So I decided to also scrape a list of artists I could scrape, and make the original script run continuously on a loop until every artist on the list was scraped. The Year End Top 100 artists chart of &lt;a href="https://www.billboard.com"&gt;Billboard&lt;/a&gt; was an obvious choice for this. I scraped the top artists of every year since the inception of the chart in 2006. Getting all the lyrics took ~2-3 days of almost non-stop scraping. &lt;strong&gt;Shoutout to Genius.com for not putting a limit on number of API requests users can make! &amp;lt;3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Having all this data inspired the idea for what became the 3rd component of my project - analysing all artists' lyrics all at once and clustering artists based on the sentiments of their lyrics.&lt;/p&gt;
&lt;h4&gt;Tech stack:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sentiment, polarity and topic extraction&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;For the sentiment analysis component, I used the open-sourced &lt;a href="https://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Lexicon&lt;/a&gt;, a crowdsourced list of ~15,000 English words and their associations to one or more of 8 basic human emotions (anger, anticipation, fear, disgust, trust, surprise, sadness, joy). With this lexicon at hand, my approach to extract sentiments was as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tokenize and lemmatize each song for each artist  &lt;/li&gt;
&lt;li&gt;Remove stop words (words like so, oh, yeah) and punctuation &lt;/li&gt;
&lt;li&gt;Map the remaining words in every song to the emotions they are related to&lt;/li&gt;
&lt;li&gt;Count up total number of words associated with each emotion, and aggregate the data on the basis of album/song release years&lt;/li&gt;
&lt;li&gt;Normalize the data for each release year &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though the NRC lexicon included positive/negative labels along with sentiments, I was able to get my hands on a less well known lexicon called &lt;a href="https://github.com/cjhutto/vaderSentiment"&gt;VADER&lt;/a&gt;, also open-sourced, which seemed to be a better option for polarity analysis due to the following reasons: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is specifically attuned to sentiments expressed on social media, where the form of expression is similar to the form of expression in songs&lt;/li&gt;
&lt;li&gt;It provides information on how positive or negative a word is rather than just denoting it as one or the other&lt;/li&gt;
&lt;li&gt;It has it's own python module!&lt;/li&gt;
&lt;li&gt;It comes with a unidimensional measure of polarity called the &lt;code&gt;compound score&lt;/code&gt;, which yields a normalized and weighted score for the level of positivity or negativity of a given sentence. The compound score ranges between -1 (most extreme negative) and 1 (most extreme positive)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, to identify the prevalent themes in songs, I used Latent Dirichlet Allocation (LDA) - an unsupervised technique that enables the discovery of topics in a collection of documents. LDA imagines that each document (a document is a song in this case) is described by a distribution of topics, and that each topic is described by a distribution of words. Here is a silly example of how it works under the hood:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sentence A:&lt;/strong&gt; I went to the mall to buy jeans, shirts and shoes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentence B:&lt;/strong&gt; I spilled coffee all over my clothes. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentence C:&lt;/strong&gt; I spilled food on the jeans that I bought yesterday.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LDA would find something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distribution of topics:&lt;ul&gt;
&lt;li&gt;Sentence A is &lt;strong&gt;100%&lt;/strong&gt; about &lt;strong&gt;Topic 1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sentence B is &lt;strong&gt;100%&lt;/strong&gt; about &lt;strong&gt;Topic 2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sentence C is &lt;strong&gt;50%&lt;/strong&gt; about &lt;strong&gt;Topic 1&lt;/strong&gt;, &lt;strong&gt;50%&lt;/strong&gt; about &lt;strong&gt;Topic 2&lt;/strong&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distribution of words:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topic 1:&lt;/strong&gt; 30% buy, 20% mall, 20% jeans, 10% shoes, 10% shirts &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Topic 2:&lt;/strong&gt; 40% spill, 15% coffee, 15% food, 10% jeans &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is then upto us humans to realise that topic 1 is probably about shopping, and topic 2 is probably about spilling food and beverages on clothes.&lt;/p&gt;
&lt;h4&gt;Tech stack:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nltk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vaderSentiment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wordcloud&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gensim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sklearn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Clustering&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;I wanted to see which songs were similar in sentiments to one another, and which artists were similar in the overall sentiments expressed considering all of their lyrics. &lt;/p&gt;
&lt;p&gt;To cluster songs, I represented each song with its normalized sentiment composition vector (eg. 30% anger, 20% sadness, 5% disgust..). To cluster artists, I took the mean of all the sentiment scores of their songs, and followed the same strategy. I included all 8 basic human emotions plus positivity and negativity from the NRC Lexicon in the vectors and used Principal Component Analysis to reduce vector dimensions from 10 to 2 so I would be able to visually assess the performance of different clustering algorithms. &lt;/p&gt;
&lt;p&gt;After giving a host of clustering algorithms like K-Means, Mean Shift, DBSCAN and Hierarchical clustering a try with a variety of hyperparameters, the groupings produced by K-Means seemed to make the most sense. The main disadvantage of Mean Shift, DBSCAN and Hierarchical clustering was that the respective hyperparameters that yielded reasonable groupings varied significantly from one artist to the next. This was problematic since I wanted my application to be able to output meaningful results for any given artist. 3, 4 and 5 number of neighbors with K-Means seemed to consistently yield logical groupings for the clustering of songs. I eventually decided to show all three number of neighbors in the app, and let the user decide which one was most appropriate for a given artist. &lt;/p&gt;
&lt;p&gt;For the all artists section, though ensuring results would match any given input was no longer a concern, K-Means with 4 neighbors, again, seemed to be the best performing algorithm since the categorization produced was the most well aligned with the musical genre of artists.&lt;/p&gt;
&lt;h4&gt;Tech stack:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sklearn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interactive visualisations&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;This part of my project was very important to me because I love data visualisation, and I think interactive visualisations are the most effective way to communicate information on data. After doing a bit of research, it seemed that &lt;code&gt;Bokeh&lt;/code&gt; was the best python data visualisation library for creating interactive charts on web apps. I had never used Bokeh before and so I had to learn how it works, which was a fun challenge. Here is an example of the sentiment and clustering charts I created, for Drake (only appropriate since I am writing this blog post from Toronto):&lt;/p&gt;
&lt;p&gt;&lt;img src="images/capstone_10_0.png" alt="dt" width="900"/&gt;
&lt;img src="images/capstone_11_0.png" alt="dt" width="930"/&gt;&lt;/p&gt;
&lt;h4&gt;Tech stack:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bokeh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Web app&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;To build the web app, I used &lt;code&gt;Flask&lt;/code&gt;, a micro web framework written in Python - called micro because it doesn't require particular tools and libraries that full-stack web development frameworks like &lt;code&gt;Django&lt;/code&gt; do. It's lightweight and so is perfect for the purposes of non-web developers like myself creating simple applications to showcase their work.&lt;/p&gt;
&lt;p&gt;Each page on the app is defined by a flask function and rendered from a html template page. Variables are passed from python onto HTML with &lt;code&gt;jinja2&lt;/code&gt;, and pages are prettied up with &lt;code&gt;css&lt;/code&gt; and a tiny bit of &lt;code&gt;javascript&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;As someone completely new to HTML, CSS and javascript, this part was a lot of trial, error and googling. But I actually really enjoyed the experience! Creating a tangible product that I can see and interact with was really satisfying, and I'm planning to continue to learn some more web development on the side. I'm particularly interested in learning javascript because of &lt;code&gt;d3.js&lt;/code&gt; - a really powerful data visualisation library which some of my favourite websites like &lt;a href="https://pudding.cool"&gt;The Pudding&lt;/a&gt; and &lt;a href="https://fivethirtyeight.com"&gt;FiveThirtyEight&lt;/a&gt; use. &lt;/p&gt;
&lt;h4&gt;Tech stack:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jinja2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Challenges&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;It turns out that some strange things are stored as lyrics on Genius's API, like awards ceremony speeches, interviews, and even instagram statements. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://genius.com/Beyonce-statement-on-jay-z-and-solange-fight-lyrics"&gt;Beyonce statement on Jay-Z and Solage fight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://genius.com/Drake-drake-speaks-lyrics"&gt;Drake interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://genius.com/Kanye-west-2016-mtv-vmas-speech-lyrics"&gt;Kanye West MTV VMA's 2016 speech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, many songs have duplicate pages because songs sung in concerts, live sessions or at a particular event sometimes get stored as an original song. See below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://genius.com/Queen-liar-lyrics"&gt;Liar by Queen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://genius.com/Queen-liar-bbc-session-feburary-5th-1973-langham-1-studio-lyrics"&gt;Liar by Queen, BBC Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Filtering these kind of pages from the data was challenging. I had to manually go through numerous lyrics to identify what kinds of patterns were showing up in the urls of pages that were duplicates or non-song texts and define rules to remove pages whose urls included words which hinted that the page was a duplicate or non-song text.&lt;/p&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Genius doesn't have a fully exhaustive collection of lyrics for most artists. Beyonce, one of the most prolific singers' of our time, for example, only has lyrics for ~180 unique songs on Genius (that is when we remove duplicates, speeches and statements). &lt;/li&gt;
&lt;li&gt;The sentiment lexicon used doesn't take into account the intensity of sentiments. For example, the words "hate" and "dislike" would both be labeled as expressing anger, though one could argue that hate expresses anger in a more intense way. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Incorporate information on milestones in artists' careers so it's possible to directly see if certain events caused a change in the content of their songs&lt;/li&gt;
&lt;li&gt;Publish the app!&lt;/li&gt;
&lt;/ol&gt;</content><category term="NLP"></category></entry></feed>